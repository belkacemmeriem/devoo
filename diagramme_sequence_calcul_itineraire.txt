title Calcul itiÃ©nraire

"r:RoadMap"->+"g:GraphDeliveries": GraphDeliveries(this)
"g:GraphDeliveries"-->-"r:RoadMap":

"r:RoadMap"->+"g:GraphDeliveries": createGraph()

"g:GraphDeliveries"-->+"r:RoadMap":

"g:GraphDeliveries"->+"r:RoadMap":
getListScheludles()

"r:RoadMap"-->-"g:GraphDeliveries": timeZones

"g:GraphDeliveries"->+"r:RoadMap":getZoneGeo()
"r:RoadMap"-->-"g:GraphDeliveries":ZoneGeo
loop pour chaque livraison
"g:GraphDeliveries"->+Dijkstra:solve(z:ZoneGeo,depart:Node,listeArrivees:List<Node>)
Dijkstra->+Path:Path(List<Node>,duration:int)
Path-->-Dijkstra:

Dijkstra-->-"g:GraphDeliveries":List<Path>
end
"g:GraphDeliveries"-->-"r:RoadMap":void

"r:RoadMap"->+"g:GraphDeliveries":calcItineraire()
"g:GraphDeliveries"->+"tsp:TSP":solve(timeLimit,(nbVertices+1)*maxArcCost,this)
"tsp:TSP"-->-"g:GraphDeliveries":retourCalc:int
alt retourCalc=SOLUTION_FOUND || OPTIMAL_SOLUTION_FOUND
loop pour chaque d:Delivery
"g:GraphDeliveries"->+"d:Delivery":addPath(cheminPrecedent:Path)
"d:Delivery"-->-"g:GraphDeliveries":void
end
"g:GraphDeliveries"-->"r:RoadMap":List<Delivery>
else
"g:GraphDeliveries"-->-"r:RoadMap":Exception
end